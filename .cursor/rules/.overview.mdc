---
description: 
globs: 
alwaysApply: true
---

## 🎯 기본 원칙
- 하나의 테스트는 **하나의 개념**만 검증한다.
- 테스트 간 상태 공유 없이 **완전히 독립적**이어야 한다.
- 테스트는 **반드시 고정된 값**(ex. LocalDateTime.now() 사용 금지)으로 수행한다.
- **TDD 사이클**(Red → Green → Refactoring)을 따른다.
  - 실패하는 테스트 작성 → 최소 코드로 통과 → 리팩토링

## 🧪 테스트 환경 세팅
- Spring 환경에 맞게 적절한 테스트 어노테이션을 사용한다.
  - 전체 통합 테스트: `@SpringBootTest`
  - MVC 테스트: `@WebMvcTest`
  - JPA 레이어 테스트: `@DataJpaTest`
- 필요 없는 빈 로딩은 최대한 줄인다.

## 📝 테스트 작성 스타일
- `@DisplayName`을 사용해 **동작 + 기대 결과**를 명확히 설명한다.
- 메서드 이름은 **단수/복수 정확히 구분**, **목적 중심**으로 작성한다.
- 매직 넘버는 상수로 추출하여 의미를 부여한다.
- 불필요한 부정 조건은 피하고, 부득이할 경우 별도 메서드로 추출한다.
- 컬렉션 테스트는 반복문을 쓰더라도 **단일 요소 검증**에 집중한다.
- **Getter/Setter 사용 지양**, 필요한 경우 불변 객체를 설계한다.

## 🔥 코드 작성 및 리팩토링 기준
- 메서드는 하나의 역할만 담당한다.
- 메서드 선언 순서:
  - `public` → `protected` → `private`
  - **상태 변경** → **판별** → **조회**
- 의미 없는 주석 대신 **코드로 의도 표현**한다.
- 리팩토링 순서:
  1. 중복 제거
  2. 메서드 추출
  3. 객체 분리
  4. 추상화
- **과감한 리팩토링**이 필요하면 적극적으로 수행한다.
- SOLID 원칙(단일 책임, 개방-폐쇄, 리스코프 치환, 인터페이스 분리, 의존 역전)을 최대한 반영한다.

## 📦 데이터/구조 관련 규칙
- 관련 데이터는 Value Object(VO)로 묶는다.
- 컬렉션은 일급 컬렉션으로 포장하되, **가공 메서드가 존재하는 경우에만** 적용한다.
- Enum은 **의미 있는 필드**와 함께 설계한다. 단순 나열 용도 지양.

## ❗ 주의사항
- 테스트 안에서 **반환 타입/동작을 헷갈리게 하지 않는다**.
- 상속보다 **조합과 인터페이스 기반** 설계를 우선한다.
- 테스트가 실패했을 때 **원인 파악이 명확**해야 한다.
- Mocking은 필요한 만큼만 하고, 과도한 Mocking을 피한다.

---

